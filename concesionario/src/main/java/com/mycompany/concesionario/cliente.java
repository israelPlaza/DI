/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.concesionario;

import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author isra
 */
public class cliente extends javax.swing.JFrame {
    private List<Integer> clientesIds = new ArrayList<>(); 
    /**
     * Creates new form cliente
     */
    public cliente() {
        initComponents();
        cargarClientesEnTabla();
        
        tablaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tablaClienteMouseClicked(evt);
        }
    });
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabla = new javax.swing.JScrollPane();
        tablaCliente = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        nombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        apellidos = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        direccion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        telefono = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        clienteFinal = new javax.swing.JCheckBox();
        clienteEmpre = new javax.swing.JCheckBox();
        anadirCliente = new javax.swing.JButton();
        borrarCliente = new javax.swing.JButton();
        editarCliente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Apellidos", "Direccion", "Telefono", "Cliente final", "Cliente Empresa"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setViewportView(tablaCliente);

        jLabel1.setText("Nombre");

        nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreActionPerformed(evt);
            }
        });

        jLabel2.setText("Apellidos");

        apellidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apellidosActionPerformed(evt);
            }
        });

        jLabel3.setText("Direccion");

        direccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direccionActionPerformed(evt);
            }
        });

        jLabel4.setText("Cliente final");

        telefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telefonoActionPerformed(evt);
            }
        });

        jLabel5.setText("Telefono");

        jLabel6.setText("Cliente empresarial");

        anadirCliente.setText("AÃ±adir");
        anadirCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anadirClienteActionPerformed(evt);
            }
        });

        borrarCliente.setText("Borrar");
        borrarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarClienteActionPerformed(evt);
            }
        });

        editarCliente.setText("Editar");
        editarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clienteEmpre)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nombre, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                .addComponent(apellidos)
                                .addComponent(direccion)
                                .addComponent(telefono)
                                .addComponent(clienteFinal))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(anadirCliente)
                        .addGap(18, 18, 18)
                        .addComponent(borrarCliente)
                        .addGap(18, 18, 18)
                        .addComponent(editarCliente)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(tabla, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(clienteFinal))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(clienteEmpre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anadirCliente)
                    .addComponent(borrarCliente)
                    .addComponent(editarCliente))
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreActionPerformed

    private void apellidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apellidosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apellidosActionPerformed

    private void direccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_direccionActionPerformed

    private void telefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telefonoActionPerformed
        
    }//GEN-LAST:event_telefonoActionPerformed

    private void anadirClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anadirClienteActionPerformed
    String jdbcUrl = "jdbc:mariadb://localhost:3306/concesionario";
    String username = "root";  
    String password = "1985"; 

    // Obtener valores de los campos
    String nombreText = nombre.getText();
    String apellidosText = apellidos.getText();
    String direccionText = direccion.getText();
    String telefonoText = telefono.getText();  // Mantenerlo como String temporalmente
    boolean clientefinal = clienteFinal.isSelected();
    boolean clienteEmpreSelec = clienteEmpre.isSelected();

    // Validar campos
    if (nombreText.isEmpty() || apellidosText.isEmpty() || direccionText.isEmpty() || telefonoText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Consulta SQL para insertar los datos en la base de datos
    String insertSql = "INSERT INTO Clientes (nombre, apellidos, direccion, telefono, clientefinal, clienteEmpresarial) VALUES (?, ?, ?, ?, ?, ?)";

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
         PreparedStatement statement = connection.prepareStatement(insertSql)) {

        statement.setString(1, nombreText);
        statement.setString(2, apellidosText);
        statement.setString(3, direccionText);
        statement.setString(4, telefonoText); // Cambiar a String
        statement.setBoolean(5, clientefinal);
        statement.setBoolean(6, clienteEmpreSelec);
       
        // Ejecutar la inserciÃ³n y actualizar la tabla
        statement.executeUpdate();
        cargarClientesEnTabla();
        JOptionPane.showMessageDialog(this, "Cliente aÃ±adido correctamente.");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al aÃ±adir el cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }  
    }//GEN-LAST:event_anadirClienteActionPerformed

    private void borrarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarClienteActionPerformed
         // Obtener la fila seleccionada
    int selectedRow = tablaCliente.getSelectedRow();
    
    if (selectedRow == -1) { // Verificar si no se ha seleccionado ninguna fila
        JOptionPane.showMessageDialog(this, "Seleccione un cliente para borrar.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener el ID del cliente a eliminar
    int clienteId = clientesIds.get(selectedRow);
    
    String jdbcUrl = "jdbc:mariadb://localhost:3306/concesionario";
    String username = "root";  
    String password = "1985"; 

    // Consulta SQL para eliminar el cliente
    String deleteSql = "DELETE FROM Clientes WHERE id = ?";

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
         PreparedStatement statement = connection.prepareStatement(deleteSql)) {

        statement.setInt(1, clienteId); // Establecer el ID del cliente

        // Ejecutar la eliminaciÃ³n
        int rowsAffected = statement.executeUpdate();
        
        if (rowsAffected > 0) {
            cargarClientesEnTabla(); // Actualizar la tabla despuÃ©s de eliminar
            JOptionPane.showMessageDialog(this, "Cliente borrado correctamente.");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo encontrar el cliente para borrar.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al borrar el cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }  
    }//GEN-LAST:event_borrarClienteActionPerformed

    private void editarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarClienteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tablaCliente.getSelectedRow();
        String jdbcUrl = "jdbc:mariadb://localhost:3306/concesionario";
        String username = "root";  
        String password = "1985"; 
        
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Seleccione un cliente para editar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Obtener los datos de los campos
    String nombreText = nombre.getText();
    String apellidosText = apellidos.getText();
    String direccionText = direccion.getText();
    String telefonoText = telefono.getText();
    boolean clientefinal = clienteFinal.isSelected();
    boolean clienteEmpreSelec = clienteEmpre.isSelected();

    int telefonoValue;
    try {
        telefonoValue = Integer.parseInt(telefonoText); // AsegÃºrate de que el telÃ©fono sea un nÃºmero
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Ingrese un valor numÃ©rico vÃ¡lido para el telÃ©fono.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener el ID del cliente que se estÃ¡ editando
    int clienteId = clientesIds.get(selectedRow);

    // Consulta SQL para actualizar los datos del cliente
    String updateSql = "UPDATE Clientes SET nombre = ?, apellidos = ?, direccion = ?, telefono = ?, clientefinal = ?, clienteEmpresarial = ? WHERE id = ?";

    try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
         PreparedStatement statement = connection.prepareStatement(updateSql)) {

        statement.setString(1, nombreText);
        statement.setString(2, apellidosText);
        statement.setString(3, direccionText);
        statement.setInt(4, telefonoValue); // CambiÃ© a setInt ya que el tipo de datos es Integer
        statement.setBoolean(5, clientefinal);
        statement.setBoolean(6, clienteEmpreSelec);
        statement.setInt(7, clienteId); // ID del cliente que se estÃ¡ editando

        // Ejecutar la actualizaciÃ³n
        statement.executeUpdate();
        cargarClientesEnTabla(); // Recargar la tabla con los datos actualizados
        JOptionPane.showMessageDialog(this, "Cliente editado correctamente.");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al editar el cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_editarClienteActionPerformed

    private void cargarClientesEnTabla() {
    String jdbcUrl = "jdbc:mariadb://localhost:3306/concesionario";
        String username = "root";
        String password = "1985";

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
             Statement statement = connection.createStatement()) {

            String selectSql = "SELECT * FROM Clientes";
            ResultSet resultSet = statement.executeQuery(selectSql);

            DefaultTableModel model = (DefaultTableModel) tablaCliente.getModel();
            model.setRowCount(0);  // Limpia la tabla
            clientesIds.clear(); // Limpia la lista de IDs

            while (resultSet.next()) {
                Object[] fila = {
                    resultSet.getString("nombre"),
                    resultSet.getString("apellidos"),
                    resultSet.getString("direccion"),
                    resultSet.getInt("telefono"),
                    resultSet.getBoolean("clientefinal"),
                    resultSet.getBoolean("clienteEmpresarial")
                };
                model.addRow(fila);
                clientesIds.add(resultSet.getInt("id")); // Agrega el ID a la lista
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar los clientes de la base de datos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void tablaClienteMouseClicked(java.awt.event.MouseEvent evt) {
    int selectedRow = tablaCliente.getSelectedRow();
    if (selectedRow != -1) {
        // Obtener los datos de la fila seleccionada
        String nombreText = (String) tablaCliente.getValueAt(selectedRow, 0);
        String apellidosText = (String) tablaCliente.getValueAt(selectedRow, 1);
        String direccionText = (String) tablaCliente.getValueAt(selectedRow, 2);
        int telefonoValue = (Integer) tablaCliente.getValueAt(selectedRow, 3);
        boolean clientefinal = (Boolean) tablaCliente.getValueAt(selectedRow, 4);
        boolean clienteEmpreSelec = (Boolean) tablaCliente.getValueAt(selectedRow, 5);

        // Colocar los datos en los campos de texto
        nombre.setText(nombreText);
        apellidos.setText(apellidosText);
        direccion.setText(direccionText);
        telefono.setText(String.valueOf(telefonoValue)); // Convertir a String

        // Seleccionar los checkboxes
        clienteFinal.setSelected(clientefinal);
        clienteEmpre.setSelected(clienteEmpreSelec);
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new cliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anadirCliente;
    private javax.swing.JTextField apellidos;
    private javax.swing.JButton borrarCliente;
    private javax.swing.JCheckBox clienteEmpre;
    private javax.swing.JCheckBox clienteFinal;
    private javax.swing.JTextField direccion;
    private javax.swing.JButton editarCliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField nombre;
    private javax.swing.JScrollPane tabla;
    private javax.swing.JTable tablaCliente;
    private javax.swing.JTextField telefono;
    // End of variables declaration//GEN-END:variables
}
